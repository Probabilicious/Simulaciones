# BinNeg(n, p)
simula_BinNeg<-function(n, p){
u = runif(n, 0, 1)
ker = sapply(u, function(k) floor(log(k)/log(1-p)) )
x = sum(ker)
return(x)
}
# Gamma(n, λ)
simula_Gamma <- function(n, lambda){
u = prod(runif(n, 0, 1))
x = -(1/(lambda)) * log(u)
return(x)
}
#Main
#Revisando el valor de M
args = commandArgs(trailingOnly=TRUE)
if(length(args)==0){
stop("Uso: simulación.R M")
}
m = as.integer(args[1])
if(is.na(m)){
stop("Valor no numérico")
}
if(m < 0) {
stop("Valor negativo inválido")
}
# Generando Binomial Negativa
n = 20
p = 0.75
randX = numeric(m)
for(i in 1:m){
bn = simula_BinNeg(n, p)
randX[i] = bn
}
title = sprintf("Binomial negativa con n=%1.1f, p=%1.2f", n, p)
hist(randX, main=title, breaks = m/5)
# Generando Gamma
n = 5
lambda = 1
randX = numeric(m)
for(i in 1:m){
randX[i] = simula_Gamma(n, lambda)
}
title = sprintf("Gamma con n=%1.1f, lambda=%1.1f", n, lambda)
hist(randX, main=title, breaks = m/5)
# BinNeg(n, p)
simula_BinNeg<-function(n, p){
u = runif(n, 0, 1)
ker = sapply(u, function(k) floor(log(k)/log(1-p)) )
x = sum(ker)
return(x)
}
# Gamma(n, λ)
simula_Gamma <- function(n, lambda){
u = prod(runif(n, 0, 1))
x = -(1/(lambda)) * log(u)
return(x)
}
#Main
#Revisando el valor de M
args = commandArgs(trailingOnly=TRUE)
if(length(args)==0){
stop("Uso: simulación.R M")
}
m = as.integer(args[1])
if(is.na(m)){
stop("Valor no numérico")
}
if(m < 0) {
stop("Valor negativo inválido")
}
# Generando Binomial Negativa
n = 20
p = 0.75
randX = numeric(m)
for(i in 1:m){
bn = simula_BinNeg(n, p)
randX[i] = bn
}
title = sprintf("Binomial negativa con n=%1.1f, p=%1.2f", n, p)
hist(randX, main=title, breaks = m/5)
# Generando Gamma
n = 5
lambda = 1
randX = numeric(m)
for(i in 1:m){
randX[i] = simula_Gamma(n, lambda)
}
title = sprintf("Gamma con n=%1.1f, lambda=%1.1f", n, lambda)
